*  binary search
       1. Find the middle element , where middle = (start+end)/2  or  middle = start + (end-start)/2  both are same just to avoid int size limitation in java use 2nd one
       2.if target > mid ,search in right side of the middle element else left side  (assuming array is sorted in ascending order)
       3.repeat this process until you find the target element
       4. if middle = target // found the ans


       deriving the binary search formula :

       [*,*,*,*,*,*,*,*,*,*,*,*,*,*..........N]
                                                                       ->0 th level    N/2^0
        when compared to middle element search space reduced to N/2    -->1 st level   N/2^1
        similarly for next middle element search space reduced to N/4 --> 2nd level     N/2^2
        similarly for next middle element search space reduced to N/4  --> 3rd level     N/2^3
    :   :   :               : : :       :::     ::::::          :::::
    :   :   :               : : :       :::     ::::::          :::::
    :   :   :               : : :       :::     ::::::          :::::
    :   :   :               : : :       :::     ::::::          ::::: ---> kth level     N/2^k


    we know at the end we only find one element so for kth level

    N/2^k = 1
    N = 2^k
    apply log on both sides
    log(N) = log(2^k)
    log(N) = k log(2)
    k= log(N) / log(2)  ==>> logN (logn base 2) (base 2 is ignored)

    [ K = log(N) ]   where K is  number of comparisons